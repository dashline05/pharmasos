---
import Layout from "@/layouts/Base.astro";
import type { Pharmacy } from '@/types/pharmacy';
import pharmacyData from '@/data/pharmacyData.json';
import { validLanguages, type ValidLanguage, defaultLanguage } from '@/constants/languages';
import { getCitySlug } from '@/utils/slug';

export const prerender = false;

const { lang, city } = Astro.params;
const currentLang = validLanguages.includes(lang as ValidLanguage) ? lang as ValidLanguage : defaultLanguage;

// Get pharmacies from both sources
const lematinPharmacies = pharmacyData?.sources?.lematin?.pharmacies || [];
const guidePharmacies = pharmacyData?.sources?.guide?.pharmacies || [];
const allPharmacies = [...lematinPharmacies, ...guidePharmacies];

// Normalize the city parameter
const normalizedCity = city?.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '');

// Get pharmacies for the current city with case-insensitive comparison
const pharmacies = allPharmacies.filter(p => {
  const pharmacyCity = getCitySlug(p.city, 'fr')?.toLowerCase();
  return pharmacyCity === normalizedCity;
});

// For debugging
console.log('Available cities:', allPharmacies.map(p => p.city.fr));
console.log('Current city param:', city);
console.log('Normalized city:', normalizedCity);
console.log('Found pharmacies:', pharmacies.length);

// Get city name in current language
const cityName = pharmacies[0]?.city[currentLang] || city;

const translations = {
  title: {
    fr: `${cityName} - Pharmacies de Garde`,
    en: `${cityName} - On-Duty Pharmacies`,
    ar: `${cityName} - ÿµŸäÿØŸÑŸäÿßÿ™ ÿßŸÑÿ≠ÿ±ÿßÿ≥ÿ©`
  },
  subtitle: {
    fr: "Trouvez facilement une pharmacie ouverte pr√®s de chez vous",
    en: "Easily find an open pharmacy near you",
    ar: "ÿßÿπÿ´ÿ± ÿ®ÿ≥ŸáŸàŸÑÿ© ÿπŸÑŸâ ÿµŸäÿØŸÑŸäÿ© ŸÖŸÅÿ™Ÿàÿ≠ÿ© ÿ®ÿßŸÑŸÇÿ±ÿ® ŸÖŸÜŸÉ"
  },
  important: {
    fr: "‚ö†Ô∏è IMPORTANT : Veuillez toujours appeler avant de vous d√©placer pour confirmer que la pharmacie est actuellement ouverte. Les horaires peuvent varier.",
    en: "‚ö†Ô∏è IMPORTANT: Always call before visiting to confirm the pharmacy is currently open. Hours may vary.",
    ar: "‚ö†Ô∏è ŸáÿßŸÖ: Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿØÿßÿ¶ŸÖÿßŸã ŸÇÿ®ŸÑ ÿßŸÑÿ≤Ÿäÿßÿ±ÿ© ŸÑŸÑÿ™ÿ£ŸÉÿØ ŸÖŸÜ ÿ£ŸÜ ÿßŸÑÿµŸäÿØŸÑŸäÿ© ŸÖŸÅÿ™Ÿàÿ≠ÿ© ÿ≠ÿßŸÑŸäÿßŸã. ŸÇÿØ ÿ™ÿÆÿ™ŸÑŸÅ ÿ≥ÿßÿπÿßÿ™ ÿßŸÑÿπŸÖŸÑ."
  },
  directions: {
    fr: "Cliquez pour obtenir l'itin√©raire sur:",
    en: "Click to get directions on:",
    ar: "ÿßŸÜŸÇÿ± ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™ ÿπŸÑŸâ:"
  }
} as const;

const pageTitle = translations.title[currentLang];
const pageDescription = translations.subtitle[currentLang];

// Add filter translations
const filterTranslations = {
  all: {
    fr: "Toutes les pharmacies",
    en: "All pharmacies",
    ar: "ÿ¨ŸÖŸäÿπ ÿßŸÑÿµŸäÿØŸÑŸäÿßÿ™"
  },
  regular: {
    fr: "Ouvertes 9h00-00h00",
    en: "Open 9h00-00h00",
    ar: "09h00-00h00"
  },
  open24h: {
    fr: "Ouvertes 24h/24",
    en: "Open 24h/24",
    ar: "24h/24h"
  }
} as const;

// Add filter function with proper type checking
function is24hPharmacy(pharmacy: any) {
  const hours = pharmacy.hours;
  if (typeof hours === 'object' && hours !== null) {
    return Object.values(hours).some(h => 
      typeof h === 'string' && (
        h.toLowerCase().includes('24h') || 
        h.toLowerCase().includes('24/24') ||
        h.toLowerCase().includes('00h-24h')
      )
    );
  }
  return typeof hours === 'string' && (
    hours.toLowerCase().includes('24h') || 
    hours.toLowerCase().includes('24/24') ||
    hours.toLowerCase().includes('00h-24h')
  );
}
---

<Layout 
  title={pageTitle}
  description={pageDescription}
  lang={currentLang}
  dir={currentLang === 'ar' ? 'rtl' : 'ltr'}
>
  <div class="pharmacy-page">
    <h1>{pageTitle}</h1>
    <p class="subtitle">{pageDescription}</p>
    <p class="important-notice">{translations.important[currentLang]}</p>

    <!-- Add filter buttons -->
    <div class="filter-buttons">
      <button
        class="filter-btn active"
        data-filter="all"
      >
        {filterTranslations.all[currentLang]}
      </button>
      <button
        class="filter-btn"
        data-filter="regular"
      >
        {filterTranslations.regular[currentLang]}
      </button>
      <button
        class="filter-btn"
        data-filter="24h"
      >
        {filterTranslations.open24h[currentLang]}
      </button>
    </div>

    <div class="pharmacy-list">
      {pharmacies.map((pharmacy) => (
        <article 
          class="pharmacy-card"
          data-hours={is24hPharmacy(pharmacy) ? '24h' : 'regular'}
        >
          <div class="card-header">
            <h2>{pharmacy.name[currentLang] || pharmacy.name.fr}</h2>
            <span class="hours-badge">
              {typeof pharmacy.hours === 'object' 
                ? pharmacy.hours[currentLang] || pharmacy.hours.fr
                : pharmacy.hours}
            </span>
          </div>

          <div class="card-content">
            <div class="info-row">
              <span class="icon">üìç</span>
              <span>{pharmacy.location[currentLang]}</span>
            </div>

            <div class="info-row">
              <span class="icon">üè¢</span>
              <span>{pharmacy.address[currentLang]}</span>
            </div>

            <div class="info-row phone">
              <span class="icon">üìû</span>
              <span dir="ltr" class="phone-number">{pharmacy.phone}</span>
            </div>
          </div>

          <div class="card-footer">
            <p class="directions-text">{translations.directions[currentLang]}</p>
            <div class="nav-buttons">
              <a href={pharmacy.maps.links.google_maps} target="_blank" rel="noopener noreferrer" class="nav-button">
                Google Maps
              </a>
              <a href={pharmacy.maps.links.waze} target="_blank" rel="noopener noreferrer" class="nav-button">
                Waze
              </a>
              <a href={pharmacy.maps.links.apple_maps} target="_blank" rel="noopener noreferrer" class="nav-button">
                Apple Maps
              </a>
            </div>
          </div>
        </article>
      ))}
    </div>
  </div>
</Layout>

<style>
  .pharmacy-page {
    background: #000000;
    color: #ffffff;
    padding: 2rem 1rem;
    min-height: 100vh;
  }

  h1 {
    text-align: center;
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }

  .subtitle {
    text-align: center;
    color: #cccccc;
    margin-bottom: 1rem;
  }

  .important-notice {
    text-align: center;
    color: #fbbf24;
    font-size: 0.95rem;
    max-width: 800px;
    margin: 0 auto 2rem;
    padding: 0.75rem;
    background: rgba(251, 191, 36, 0.1);
    border-radius: 8px;
    line-height: 1.5;
  }

  .pharmacy-list {
    max-width: 800px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .pharmacy-card {
    background: #1F2937;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    width: 100%;
  }

  .card-header {
    padding: 1.25rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #374151;
  }

  .card-header h2 {
    margin: 0;
    font-size: 1.5rem;
    font-weight: bold;
  }

  .hours-badge {
    background: #8B6B23;
    color: white;
    padding: 0.35rem 1rem;
    border-radius: 999px;
    font-size: 0.9rem;
  }

  .card-content {
    padding: 1.25rem;
  }

  .info-row {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    color: #cccccc;
    font-size: 1.1rem;
  }

  .icon {
    margin-right: 0.75rem;
    font-size: 1.4rem;
    width: 2rem;
    text-align: center;
  }

  .phone-number {
    unicode-bidi: embed;
    direction: ltr;
    display: inline-block;
  }

  .phone {
    color: #22C55E;
    font-weight: 500;
    display: flex;
    align-items: center;
  }

  .card-footer {
    padding: 1.25rem;
    border-top: 1px solid #374151;
    background: #2D3748;
  }

  .directions-text {
    text-align: center;
    color: #cccccc;
    margin-bottom: 1rem;
    font-size: 0.9rem;
  }

  .nav-buttons {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    padding: 0 1rem;
  }

  .nav-button {
    flex: 1;
    padding: 0.75rem;
    text-align: center;
    color: #22C55E;
    text-decoration: none;
    border: 1px solid #22C55E;
    border-radius: 8px;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .nav-button:hover {
    background: #22C55E;
    color: white;
  }

  /* Add media query for mobile screens */
  @media (max-width: 640px) {
    .nav-buttons {
      flex-direction: column;
      padding: 0;
    }

    .nav-button {
      width: 100%;
      margin-bottom: 0.5rem;
    }

    .nav-button:last-child {
      margin-bottom: 0;
    }

    .card-footer {
      padding: 1.25rem 1rem;
    }
  }

  /* RTL support for Arabic */
  [dir="rtl"] .pharmacy-page {
    direction: rtl;
  }

  [dir="rtl"] .icon {
    margin-right: 0;
    margin-left: 0.75rem;
  }

  .filter-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin: 2rem 0;
    padding: 0 1rem;
  }

  .filter-btn {
    background: #1F2937;
    border: 1px solid #374151;
    color: #ffffff;
    padding: 0.75rem 1.5rem;
    border-radius: 9999px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    font-weight: 500;
  }

  .filter-btn:hover {
    background: #374151;
    border-color: #4B5563;
  }

  .filter-btn.active {
    background: #4CAF48;
    border-color: #45a049;
  }

  @media (max-width: 640px) {
    .filter-buttons {
      flex-direction: column;
      padding: 0 2rem;
    }

    .filter-btn {
      width: 100%;
    }
  }
</style>

<script>
  // Add proper type assertions for DOM elements
  const filterButtons = document.querySelectorAll<HTMLButtonElement>('.filter-btn');
  const pharmacyCards = document.querySelectorAll<HTMLElement>('.pharmacy-card');

  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      // Update active button
      filterButtons.forEach(btn => btn.classList.remove('active'));
      button.classList.add('active');

      // Filter pharmacies
      const filter = button.getAttribute('data-filter');
      pharmacyCards.forEach(card => {
        if (filter === 'all') {
          card.style.display = 'block';
        } else if (filter === '24h') {
          card.style.display = card.getAttribute('data-hours') === '24h' ? 'block' : 'none';
        } else {
          card.style.display = card.getAttribute('data-hours') === 'regular' ? 'block' : 'none';
        }
      });
    });
  });
</script>
