---
import Layout from "@/layouts/Base.astro";
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { validLanguages, type ValidLanguage, defaultLanguage } from '@/constants/languages';

type BlogEntry = CollectionEntry<'blog'>;

export const prerender = true;

// Function to clean the slug - must match the one in index.astro
const cleanSlug = (id: string) => {
  return id.split('/').pop()
    ?.replace(/\.mdx$/, '')
    ?.toLowerCase()
    ?.normalize('NFD')
    ?.replace(/[\u0300-\u036f]/g, '') // Remove diacritics
    ?.replace(/[^a-z0-9]+/g, '-') // Replace non-alphanumeric with hyphens
    ?.replace(/^-+|-+$/g, '') // Remove leading/trailing hyphens
    || '';
};

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  console.log('Building paths for posts:', posts.map(p => p.id)); // Debug log
  
  return validLanguages.flatMap(lang => 
    posts
      .filter(post => post.id.startsWith(lang + '/'))
      .map(post => {
        const slug = cleanSlug(post.id);
        console.log(`Generated path for ${post.id}: /${lang}/blog/${slug}`); // Debug log
        return {
          params: { 
            lang,
            id: slug
          },
          props: { entry: post }
        };
      })
  );
}

interface Props {
  entry: BlogEntry;
}

const { entry } = Astro.props;
const { lang } = Astro.params;
const currentLang = validLanguages.includes(lang as ValidLanguage) ? lang as ValidLanguage : defaultLanguage;

const translations = {
  title: {
    fr: "Article",
    en: "Post",
    ar: "مقال"
  },
  publishedOn: {
    fr: "Publié le",
    en: "Published on",
    ar: "نُشر في"
  },
  backToBlog: {
    fr: "Retour au blog",
    en: "Back to blog",
    ar: "العودة إلى المدونة"
  }
} as const;

const { Content } = await entry.render();
---

<Layout title={`${entry.data.title} - ${translations.title[currentLang]}`}>
  <article class="blog-post">
    <a href={`/${currentLang}/blog`} class="back-link">
      {translations.backToBlog[currentLang]}
    </a>
    <h1>{entry.data.title}</h1>
    {entry.data.description && <p class="description">{entry.data.description}</p>}
    <time datetime={entry.data.date.toISOString()} class="date">
      {translations.publishedOn[currentLang]} {new Intl.DateTimeFormat(currentLang, { dateStyle: 'long' }).format(entry.data.date)}
    </time>
    <div class="content">
      <Content />
    </div>
  </article>
</Layout>

<style>
  .blog-post {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem;
  }

  .back-link {
    display: inline-block;
    margin-bottom: 2rem;
    color: #666;
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .back-link:hover {
    color: #888;
  }

  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    text-align: center;
  }

  .description {
    font-size: 1.2rem;
    color: #666;
    margin-bottom: 1rem;
    text-align: center;
  }

  .date {
    display: block;
    text-align: center;
    color: #666;
    font-size: 0.9rem;
    margin-bottom: 2rem;
  }

  .content {
    line-height: 1.6;
  }

  .content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
  }

  .content :global(h2) {
    margin: 2rem 0 1rem;
  }

  .content :global(p) {
    margin: 1rem 0;
  }

  .content :global(a img) {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
    transition: transform 0.2s ease;
  }

  .content :global(a img:hover) {
    transform: scale(1.02);
  }

  /* RTL support for Arabic */
  [dir="rtl"] .blog-post {
    direction: rtl;
  }
</style>